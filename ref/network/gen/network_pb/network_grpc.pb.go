// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: network.proto

package network_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Network_SaveTxs_FullMethodName          = "/network_pb.Network/SaveTxs"
	Network_GetTx_FullMethodName            = "/network_pb.Network/GetTx"
	Network_SaveTxBlock_FullMethodName      = "/network_pb.Network/SaveTxBlock"
	Network_GetTxBlock_FullMethodName       = "/network_pb.Network/GetTxBlock"
	Network_GetBalance_FullMethodName       = "/network_pb.Network/GetBalance"
	Network_GetBlockInfos_FullMethodName    = "/network_pb.Network/GetBlockInfos"
	Network_GetBlockByHash_FullMethodName   = "/network_pb.Network/GetBlockByHash"
	Network_GetBlockByHeight_FullMethodName = "/network_pb.Network/GetBlockByHeight"
	Network_GetMetrics_FullMethodName       = "/network_pb.Network/GetMetrics"
	Network_GetMetricList_FullMethodName    = "/network_pb.Network/GetMetricList"
	Network_GetHeightBlocks_FullMethodName  = "/network_pb.Network/GetHeightBlocks"
	Network_GetBlockTxs_FullMethodName      = "/network_pb.Network/GetBlockTxs"
	Network_GetMempoolTxs_FullMethodName    = "/network_pb.Network/GetMempoolTxs"
	Network_GetDoubleSpends_FullMethodName  = "/network_pb.Network/GetDoubleSpends"
	Network_GetUtxos_FullMethodName         = "/network_pb.Network/GetUtxos"
	Network_GetOutputInputs_FullMethodName  = "/network_pb.Network/GetOutputInputs"
	Network_OutputMessage_FullMethodName    = "/network_pb.Network/OutputMessage"
)

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkClient interface {
	SaveTxs(ctx context.Context, in *Txs, opts ...grpc.CallOption) (*SaveTxsReply, error)
	GetTx(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*TxReply, error)
	SaveTxBlock(ctx context.Context, in *TxBlock, opts ...grpc.CallOption) (*ErrorReply, error)
	GetTxBlock(ctx context.Context, in *TxBlockRequest, opts ...grpc.CallOption) (*TxBlockReply, error)
	GetBalance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*BalanceReply, error)
	GetBlockInfos(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockInfoReply, error)
	GetBlockByHash(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*BlockInfo, error)
	GetBlockByHeight(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockInfo, error)
	GetMetrics(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error)
	GetMetricList(ctx context.Context, in *MetricTimeRequest, opts ...grpc.CallOption) (*MetricTimeResponse, error)
	GetHeightBlocks(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*BlockHeightResponse, error)
	GetBlockTxs(ctx context.Context, in *BlockTxRequest, opts ...grpc.CallOption) (*BlockTxResponse, error)
	GetMempoolTxs(ctx context.Context, in *MempoolTxRequest, opts ...grpc.CallOption) (*MempoolTxResponse, error)
	GetDoubleSpends(ctx context.Context, in *DoubleSpendRequest, opts ...grpc.CallOption) (*DoubleSpendResponse, error)
	GetUtxos(ctx context.Context, in *UtxosRequest, opts ...grpc.CallOption) (*UtxosResponse, error)
	GetOutputInputs(ctx context.Context, in *OutputInputsRequest, opts ...grpc.CallOption) (*OutputInputsResponse, error)
	OutputMessage(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*ErrorReply, error)
}

type networkClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkClient(cc grpc.ClientConnInterface) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) SaveTxs(ctx context.Context, in *Txs, opts ...grpc.CallOption) (*SaveTxsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTxsReply)
	err := c.cc.Invoke(ctx, Network_SaveTxs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetTx(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*TxReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxReply)
	err := c.cc.Invoke(ctx, Network_GetTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) SaveTxBlock(ctx context.Context, in *TxBlock, opts ...grpc.CallOption) (*ErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorReply)
	err := c.cc.Invoke(ctx, Network_SaveTxBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetTxBlock(ctx context.Context, in *TxBlockRequest, opts ...grpc.CallOption) (*TxBlockReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxBlockReply)
	err := c.cc.Invoke(ctx, Network_GetTxBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetBalance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*BalanceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceReply)
	err := c.cc.Invoke(ctx, Network_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetBlockInfos(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockInfoReply)
	err := c.cc.Invoke(ctx, Network_GetBlockInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetBlockByHash(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*BlockInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockInfo)
	err := c.cc.Invoke(ctx, Network_GetBlockByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetBlockByHeight(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockInfo)
	err := c.cc.Invoke(ctx, Network_GetBlockByHeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetMetrics(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, Network_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetMetricList(ctx context.Context, in *MetricTimeRequest, opts ...grpc.CallOption) (*MetricTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricTimeResponse)
	err := c.cc.Invoke(ctx, Network_GetMetricList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetHeightBlocks(ctx context.Context, in *BlockHeightRequest, opts ...grpc.CallOption) (*BlockHeightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockHeightResponse)
	err := c.cc.Invoke(ctx, Network_GetHeightBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetBlockTxs(ctx context.Context, in *BlockTxRequest, opts ...grpc.CallOption) (*BlockTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockTxResponse)
	err := c.cc.Invoke(ctx, Network_GetBlockTxs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetMempoolTxs(ctx context.Context, in *MempoolTxRequest, opts ...grpc.CallOption) (*MempoolTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MempoolTxResponse)
	err := c.cc.Invoke(ctx, Network_GetMempoolTxs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetDoubleSpends(ctx context.Context, in *DoubleSpendRequest, opts ...grpc.CallOption) (*DoubleSpendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DoubleSpendResponse)
	err := c.cc.Invoke(ctx, Network_GetDoubleSpends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetUtxos(ctx context.Context, in *UtxosRequest, opts ...grpc.CallOption) (*UtxosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UtxosResponse)
	err := c.cc.Invoke(ctx, Network_GetUtxos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetOutputInputs(ctx context.Context, in *OutputInputsRequest, opts ...grpc.CallOption) (*OutputInputsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutputInputsResponse)
	err := c.cc.Invoke(ctx, Network_GetOutputInputs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) OutputMessage(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*ErrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ErrorReply)
	err := c.cc.Invoke(ctx, Network_OutputMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
// All implementations must embed UnimplementedNetworkServer
// for forward compatibility
type NetworkServer interface {
	SaveTxs(context.Context, *Txs) (*SaveTxsReply, error)
	GetTx(context.Context, *TxRequest) (*TxReply, error)
	SaveTxBlock(context.Context, *TxBlock) (*ErrorReply, error)
	GetTxBlock(context.Context, *TxBlockRequest) (*TxBlockReply, error)
	GetBalance(context.Context, *Address) (*BalanceReply, error)
	GetBlockInfos(context.Context, *BlockRequest) (*BlockInfoReply, error)
	GetBlockByHash(context.Context, *BlockHashRequest) (*BlockInfo, error)
	GetBlockByHeight(context.Context, *BlockRequest) (*BlockInfo, error)
	GetMetrics(context.Context, *MetricRequest) (*MetricResponse, error)
	GetMetricList(context.Context, *MetricTimeRequest) (*MetricTimeResponse, error)
	GetHeightBlocks(context.Context, *BlockHeightRequest) (*BlockHeightResponse, error)
	GetBlockTxs(context.Context, *BlockTxRequest) (*BlockTxResponse, error)
	GetMempoolTxs(context.Context, *MempoolTxRequest) (*MempoolTxResponse, error)
	GetDoubleSpends(context.Context, *DoubleSpendRequest) (*DoubleSpendResponse, error)
	GetUtxos(context.Context, *UtxosRequest) (*UtxosResponse, error)
	GetOutputInputs(context.Context, *OutputInputsRequest) (*OutputInputsResponse, error)
	OutputMessage(context.Context, *StringMessage) (*ErrorReply, error)
	mustEmbedUnimplementedNetworkServer()
}

// UnimplementedNetworkServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (UnimplementedNetworkServer) SaveTxs(context.Context, *Txs) (*SaveTxsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTxs not implemented")
}
func (UnimplementedNetworkServer) GetTx(context.Context, *TxRequest) (*TxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTx not implemented")
}
func (UnimplementedNetworkServer) SaveTxBlock(context.Context, *TxBlock) (*ErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTxBlock not implemented")
}
func (UnimplementedNetworkServer) GetTxBlock(context.Context, *TxBlockRequest) (*TxBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxBlock not implemented")
}
func (UnimplementedNetworkServer) GetBalance(context.Context, *Address) (*BalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedNetworkServer) GetBlockInfos(context.Context, *BlockRequest) (*BlockInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockInfos not implemented")
}
func (UnimplementedNetworkServer) GetBlockByHash(context.Context, *BlockHashRequest) (*BlockInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (UnimplementedNetworkServer) GetBlockByHeight(context.Context, *BlockRequest) (*BlockInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}
func (UnimplementedNetworkServer) GetMetrics(context.Context, *MetricRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedNetworkServer) GetMetricList(context.Context, *MetricTimeRequest) (*MetricTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricList not implemented")
}
func (UnimplementedNetworkServer) GetHeightBlocks(context.Context, *BlockHeightRequest) (*BlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeightBlocks not implemented")
}
func (UnimplementedNetworkServer) GetBlockTxs(context.Context, *BlockTxRequest) (*BlockTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTxs not implemented")
}
func (UnimplementedNetworkServer) GetMempoolTxs(context.Context, *MempoolTxRequest) (*MempoolTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMempoolTxs not implemented")
}
func (UnimplementedNetworkServer) GetDoubleSpends(context.Context, *DoubleSpendRequest) (*DoubleSpendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoubleSpends not implemented")
}
func (UnimplementedNetworkServer) GetUtxos(context.Context, *UtxosRequest) (*UtxosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUtxos not implemented")
}
func (UnimplementedNetworkServer) GetOutputInputs(context.Context, *OutputInputsRequest) (*OutputInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutputInputs not implemented")
}
func (UnimplementedNetworkServer) OutputMessage(context.Context, *StringMessage) (*ErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputMessage not implemented")
}
func (UnimplementedNetworkServer) mustEmbedUnimplementedNetworkServer() {}

// UnsafeNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServer will
// result in compilation errors.
type UnsafeNetworkServer interface {
	mustEmbedUnimplementedNetworkServer()
}

func RegisterNetworkServer(s grpc.ServiceRegistrar, srv NetworkServer) {
	s.RegisterService(&Network_ServiceDesc, srv)
}

func _Network_SaveTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Txs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).SaveTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_SaveTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).SaveTxs(ctx, req.(*Txs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetTx(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_SaveTxBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).SaveTxBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_SaveTxBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).SaveTxBlock(ctx, req.(*TxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetTxBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetTxBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetTxBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetTxBlock(ctx, req.(*TxBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetBalance(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetBlockInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetBlockInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetBlockInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetBlockInfos(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetBlockByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetBlockByHash(ctx, req.(*BlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetBlockByHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetBlockByHeight(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetMetrics(ctx, req.(*MetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetMetricList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetMetricList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetMetricList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetMetricList(ctx, req.(*MetricTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetHeightBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetHeightBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetHeightBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetHeightBlocks(ctx, req.(*BlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetBlockTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetBlockTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetBlockTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetBlockTxs(ctx, req.(*BlockTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetMempoolTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MempoolTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetMempoolTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetMempoolTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetMempoolTxs(ctx, req.(*MempoolTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetDoubleSpends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoubleSpendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetDoubleSpends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetDoubleSpends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetDoubleSpends(ctx, req.(*DoubleSpendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetUtxos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetUtxos(ctx, req.(*UtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetOutputInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetOutputInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetOutputInputs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetOutputInputs(ctx, req.(*OutputInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_OutputMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).OutputMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_OutputMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).OutputMessage(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Network_ServiceDesc is the grpc.ServiceDesc for Network service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Network_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network_pb.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTxs",
			Handler:    _Network_SaveTxs_Handler,
		},
		{
			MethodName: "GetTx",
			Handler:    _Network_GetTx_Handler,
		},
		{
			MethodName: "SaveTxBlock",
			Handler:    _Network_SaveTxBlock_Handler,
		},
		{
			MethodName: "GetTxBlock",
			Handler:    _Network_GetTxBlock_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Network_GetBalance_Handler,
		},
		{
			MethodName: "GetBlockInfos",
			Handler:    _Network_GetBlockInfos_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _Network_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _Network_GetBlockByHeight_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _Network_GetMetrics_Handler,
		},
		{
			MethodName: "GetMetricList",
			Handler:    _Network_GetMetricList_Handler,
		},
		{
			MethodName: "GetHeightBlocks",
			Handler:    _Network_GetHeightBlocks_Handler,
		},
		{
			MethodName: "GetBlockTxs",
			Handler:    _Network_GetBlockTxs_Handler,
		},
		{
			MethodName: "GetMempoolTxs",
			Handler:    _Network_GetMempoolTxs_Handler,
		},
		{
			MethodName: "GetDoubleSpends",
			Handler:    _Network_GetDoubleSpends_Handler,
		},
		{
			MethodName: "GetUtxos",
			Handler:    _Network_GetUtxos_Handler,
		},
		{
			MethodName: "GetOutputInputs",
			Handler:    _Network_GetOutputInputs_Handler,
		},
		{
			MethodName: "OutputMessage",
			Handler:    _Network_OutputMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
